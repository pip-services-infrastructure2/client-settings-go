// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/settings_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettingsClient is the client API for Settings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsClient interface {
	GetSectionIds(ctx context.Context, in *SettingsPageRequest, opts ...grpc.CallOption) (*SettingsIdPageReply, error)
	GetSections(ctx context.Context, in *SettingsPageRequest, opts ...grpc.CallOption) (*SettingsSectionPageReply, error)
	GetSectionById(ctx context.Context, in *SettingsIdRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error)
	SetSection(ctx context.Context, in *SettingsParamsRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error)
	ModifySection(ctx context.Context, in *SettingsModifyParamsRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error)
}

type settingsClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsClient(cc grpc.ClientConnInterface) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) GetSectionIds(ctx context.Context, in *SettingsPageRequest, opts ...grpc.CallOption) (*SettingsIdPageReply, error) {
	out := new(SettingsIdPageReply)
	err := c.cc.Invoke(ctx, "/settings_v1.Settings/get_section_ids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetSections(ctx context.Context, in *SettingsPageRequest, opts ...grpc.CallOption) (*SettingsSectionPageReply, error) {
	out := new(SettingsSectionPageReply)
	err := c.cc.Invoke(ctx, "/settings_v1.Settings/get_sections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetSectionById(ctx context.Context, in *SettingsIdRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error) {
	out := new(SettingsParamsReply)
	err := c.cc.Invoke(ctx, "/settings_v1.Settings/get_section_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetSection(ctx context.Context, in *SettingsParamsRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error) {
	out := new(SettingsParamsReply)
	err := c.cc.Invoke(ctx, "/settings_v1.Settings/set_section", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ModifySection(ctx context.Context, in *SettingsModifyParamsRequest, opts ...grpc.CallOption) (*SettingsParamsReply, error) {
	out := new(SettingsParamsReply)
	err := c.cc.Invoke(ctx, "/settings_v1.Settings/modify_section", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServer is the server API for Settings service.
// All implementations must embed UnimplementedSettingsServer
// for forward compatibility
type SettingsServer interface {
	GetSectionIds(context.Context, *SettingsPageRequest) (*SettingsIdPageReply, error)
	GetSections(context.Context, *SettingsPageRequest) (*SettingsSectionPageReply, error)
	GetSectionById(context.Context, *SettingsIdRequest) (*SettingsParamsReply, error)
	SetSection(context.Context, *SettingsParamsRequest) (*SettingsParamsReply, error)
	ModifySection(context.Context, *SettingsModifyParamsRequest) (*SettingsParamsReply, error)
	mustEmbedUnimplementedSettingsServer()
}

// UnimplementedSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServer struct {
}

func (UnimplementedSettingsServer) GetSectionIds(context.Context, *SettingsPageRequest) (*SettingsIdPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionIds not implemented")
}
func (UnimplementedSettingsServer) GetSections(context.Context, *SettingsPageRequest) (*SettingsSectionPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSections not implemented")
}
func (UnimplementedSettingsServer) GetSectionById(context.Context, *SettingsIdRequest) (*SettingsParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionById not implemented")
}
func (UnimplementedSettingsServer) SetSection(context.Context, *SettingsParamsRequest) (*SettingsParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSection not implemented")
}
func (UnimplementedSettingsServer) ModifySection(context.Context, *SettingsModifyParamsRequest) (*SettingsParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySection not implemented")
}
func (UnimplementedSettingsServer) mustEmbedUnimplementedSettingsServer() {}

// UnsafeSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServer will
// result in compilation errors.
type UnsafeSettingsServer interface {
	mustEmbedUnimplementedSettingsServer()
}

func RegisterSettingsServer(s grpc.ServiceRegistrar, srv SettingsServer) {
	s.RegisterService(&Settings_ServiceDesc, srv)
}

func _Settings_GetSectionIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetSectionIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_v1.Settings/get_section_ids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetSectionIds(ctx, req.(*SettingsPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_v1.Settings/get_sections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetSections(ctx, req.(*SettingsPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetSectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetSectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_v1.Settings/get_section_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetSectionById(ctx, req.(*SettingsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_v1.Settings/set_section",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetSection(ctx, req.(*SettingsParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ModifySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsModifyParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ModifySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_v1.Settings/modify_section",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ModifySection(ctx, req.(*SettingsModifyParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Settings_ServiceDesc is the grpc.ServiceDesc for Settings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settings_v1.Settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_section_ids",
			Handler:    _Settings_GetSectionIds_Handler,
		},
		{
			MethodName: "get_sections",
			Handler:    _Settings_GetSections_Handler,
		},
		{
			MethodName: "get_section_by_id",
			Handler:    _Settings_GetSectionById_Handler,
		},
		{
			MethodName: "set_section",
			Handler:    _Settings_SetSection_Handler,
		},
		{
			MethodName: "modify_section",
			Handler:    _Settings_ModifySection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/settings_v1.proto",
}
